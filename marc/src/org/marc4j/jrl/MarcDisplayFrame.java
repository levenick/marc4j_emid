package org.marc4j.jrl;

import org.marc4j.rules.RuleChoiceDialog;
import org.marc4j.rules.OneRecordFrame;
import org.marc4j.rules.StringCounterList;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.Collections;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.marc4j.MarcReader;
import org.marc4j.MarcStreamReader;
import org.marc4j.MarcStreamWriter;
import org.marc4j.MarcWriter;
import org.marc4j.jrl.transformation.Driver;
import org.marc4j.marc.DataField;
import org.marc4j.marc.Leader;
import org.marc4j.marc.MarcFactory;
import org.marc4j.marc.Record;
import org.marc4j.marc.Subfield;
import org.marc4j.marc.VariableField;
import org.marc4j.rules.Globals;
import org.marc4j.rules.Rule;
import org.marc4j.rules.RuleSet;
import org.marc4j.samples.AddLocationExample;
import org.marc4j.samples.DataFieldExample;

/**
 * MarcDisplayFrame.java created by levenick on Dec 29, 2013 at 10:52:35 AM
 */
public class MarcDisplayFrame extends javax.swing.JFrame {

    String path;
    InputStream input;
    MarcReader theMarcReader;
    RuleSet theRuleSet;

    public static void main(String[] args) {
        new MarcDisplayFrame("resources/ExampleFileBefore140413.mrc");
//                new MarcDisplayFrame("resources/ExampleFileAfter140510.mrc");
        //new MarcDisplayFrame("resources/VideosProvisionalSample.mrc");
        //new MarcDisplayFrame("resources/NewVideosAllFinal.mrc");
        //new MarcDisplayFrame("resources/testOut.mrc");
    }

    public MarcDisplayFrame(String path) {  // this constructor creates the form and displays it
        initComponents();
        buildRuleSet();
        openInputFile(path);

        setSize(800, 500);
        setVisible(true);
        //spitOut3AtRandom();
    }

    private void openInputFile(String path) {
        this.path = path;
        setTitle("Viewing: " + path);
        input = Rule.class.getResourceAsStream(path);
        //input = DataFieldExample.class.getResourceAsStream(path);
        if (input == null) {
            System.out.println("oops! time to fix up reading...");
        }
        theMarcReader = new MarcStreamReader(input);
    }

    /**
     * You can't modify the following code; it is regenerated by the Form
     * Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        theTA = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu4 = new javax.swing.JMenu();
        newFileMenu = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        testRuleMenu = new javax.swing.JMenuItem();
        testAllRulesMenu = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        theTA.setColumns(20);
        theTA.setRows(5);
        jScrollPane1.setViewportView(theTA);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jMenu4.setText("File");

        newFileMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newFileMenu.setText("New file");
        newFileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFileMenuActionPerformed(evt);
            }
        });
        jMenu4.add(newFileMenu);

        jMenuBar1.add(jMenu4);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Rules");

        testRuleMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        testRuleMenu.setText("Test rule");
        testRuleMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testRuleMenuActionPerformed(evt);
            }
        });
        jMenu3.add(testRuleMenu);

        testAllRulesMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        testAllRulesMenu.setText("Test all rules");
        testAllRulesMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testAllRulesMenuActionPerformed(evt);
            }
        });
        jMenu3.add(testAllRulesMenu);

        jMenuBar1.add(jMenu3);

        jMenu1.setText("Do stuff");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.META_MASK));
        jMenuItem1.setText("Echo");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.META_MASK));
        jMenuItem2.setText("Display");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.META_MASK));
        jMenuItem5.setText("Peek");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.META_MASK));
        jMenuItem3.setText("Leader");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_3, java.awt.event.InputEvent.META_MASK));
        jMenuItem4.setText("300a");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.META_MASK));
        jMenuItem6.setText("Insert Field");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        echo();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        displayNext(theMarcReader);

    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        displayLeader();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        display300a(theMarcReader);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        peek();
        //System.out.println("use Display!");
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        if (theMarcReader.hasNext()) {
            Record record = theMarcReader.next();
            new OneRecordFrame(record, "before");
            addField(record);
            new OneRecordFrame(record, "after");
        } else {
            complain("end of file!");
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void testRuleMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testRuleMenuActionPerformed
        RuleChoiceDialog rcDialog = new RuleChoiceDialog(theRuleSet);
        Rule currentRule = rcDialog.getChosenRule();
        test(currentRule);
    }//GEN-LAST:event_testRuleMenuActionPerformed

    private void newFileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFileMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newFileMenuActionPerformed

    private void testAllRulesMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testAllRulesMenuActionPerformed
        testEmAll();
    }//GEN-LAST:event_testAllRulesMenuActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem newFileMenu;
    private javax.swing.JMenuItem testAllRulesMenu;
    private javax.swing.JMenuItem testRuleMenu;
    private javax.swing.JTextArea theTA;
    // End of variables declaration//GEN-END:variables

    private void displayNext(MarcReader theReader) {
        if (theReader.hasNext()) {
            new OneRecordFrame(theReader.next(), this);
        } else {
            complain("end of file!");
        }
        requestFocus();
    }

    private void complain(String s) {
        System.out.println("COMPLAINT! -- " + s);
        theTA.append("\nCOMPLAINT! -- " + s);
    }

    private void spitOut3AtRandom() {
        MarcWriter writer = null;

        try {
            writer = new MarcStreamWriter(new FileOutputStream(new File("/Users/levenick/kelley/marc/src/org/marc4j/samples/resources/testOut2.mrc")));
        } catch (Exception e) {
            System.out.println("oops! " + e);
        }

        spit(writer, 19);
        spit(writer, 19);
        spit(writer, 19);

        writer.close();
    }

    private void spit(MarcWriter writer, int count) {
        for (int i = 1; i < count; i++) {
            theMarcReader.next();  // that's right, skip count-1 record.
        }

        writer.write(theMarcReader.next());
    }

    private void echo() {
//        InputStream input = ReadMarcExample.class.getResourceAsStream("resources/summerland.mrc");
//
//        MarcReader theMarcReader = new MarcStreamReader(input);
        //MarcWriter writer = new MarcStreamWriter(System.out);

        MarcWriter writer = null;

        try {
            writer = new MarcStreamWriter(new FileOutputStream(new File("/Users/levenick/kelley/marc/src/org/marc4j/samples/resources/testOut2.mrc")));
        } catch (Exception e) {
            System.out.println("oops! " + e);
        }
        //);
        if (theMarcReader.hasNext()) {
            Record record = theMarcReader.next();
            System.out.println("code 008=" + record.getVariableField("008"));
            //System.out.println("record = " + record);
            writer.write(record);
        } else {
            System.out.println("give it up, you are at EOF!");
        }
        writer.close();
    }

    private void displayLeader() {
        int countG = 0;
        int countM = 0;
        int countNeither = 0;

        if (theMarcReader.hasNext()) {
            Record record = theMarcReader.next();
            Leader leader = record.getLeader();
            //System.out.println("leader = " + leader);

            switch (leader.getTypeOfRecord()) {
                case 'g':
                    countG++;
                    break;
                case 'm':
                    countM++;
                    break;
                //default: countNeither++; System.out.println("record=" + record +  "\nleader = " + leader + " type=" + leader.getTypeOfRecord());
                default:
                    countNeither++;
                    System.out.println(" type=" + leader.getTypeOfRecord());
            }

            VariableField vf006 = record.getVariableField("006");
            VariableField vf008 = record.getVariableField("008");
            System.out.println("vf006 = " + vf006 + "vf008 = " + vf008);
        }
//            System.out.println("total = " + (countG+countM+countNeither));
//            System.out.println("countG = " + countG);
//            System.out.println("countM = " + countM);
//            System.out.println("countNeither = " + countNeither);
    }

    private void display300a(MarcReader reader) {
        StringCounterList list = new StringCounterList();
        int recordCount = 0;

        while (reader.hasNext()) {
            Record record = reader.next();
            recordCount++;
            VariableField vf300 = record.getVariableField("300");
            //System.out.println("vf300 = " + vf300);
            DataField df300 = (DataField) vf300;
            if (df300 == null) {
                list.add("no 300!");
                //System.out.println("record #" + recordCount + " " + record);
                System.out.println("no 300! record #" + recordCount);
                continue;
            }
            Subfield a = df300.getSubfield('a');
            //System.out.println("$a = " + a);
            String s = a.getData();
            Pattern pattern = Pattern.compile("\\(.*?\\)");
            Matcher matcher = pattern.matcher(s);
            if (matcher.find()) {
                System.out.println("matched! " + matcher.group());
                if (matcher.find()) { // second set??
                    System.out.println("\t" + matcher.group());
                }
            } else {
                System.out.println("failure! " + s);
            }
//            int parenIndex = s.indexOf('(');
//            String front = s;
//            if (parenIndex != -1) {
//                front = s.substring(0, parenIndex);
//            }
//            //System.out.println("front = " + front);
//            StringTokenizer st = new StringTokenizer(front);
//            String first = st.nextToken();  // throw away the number
//            if (st.hasMoreTokens()) {
//                String thing = st.nextToken();
//                if (thing.equals(":")) {
//                    System.out.println("Oops: "+record.getVariableField("300"));
//                }
//                list.add(thing);
//            } else if (!firstCharADigit(first)) {
//                list.add(first);
//                if (first.equals(":")) {
//                    System.out.println("colon!! "+" record = " + record);
//                }
//            } else {
//                System.out.println("failure!! df300 = " + df300);
//            }
        }
        Collections.sort(list);
        System.out.println("list = " + list);
    }

    private boolean firstCharADigit(String first) {
        return Character.isDigit(first.charAt(0));
    }

    private void peek() {
        String path = "resources/testOut2.mrc";
        input = DataFieldExample.class.getResourceAsStream(path);
        theMarcReader = new MarcStreamReader(input);
    }

    private void addField(Record record) {
        MarcFactory factory = MarcFactory.newInstance();

        DataField field = factory.newDataField("960", ' ', ' ');
        field.addSubfield(factory.newSubfield('a', "foo"));
        field.addSubfield(factory.newSubfield('b', "bar"));
        record.addVariableField(field);

        System.out.println(record.toString());
    }

    private void buildRuleSet() {
        //Globals.setRuleFileName("resources/MovingImageFormats.csv");
        Globals.setRuleFileName("resources/Duration.csv");
        theRuleSet = new RuleSet(Rule.class.getResourceAsStream(Globals.getRuleFileName()));

    }

    private void test(Rule currentRule) {
        theTA.setText("gonna test " + currentRule);
        int count = 0;
        openInputFile(path);
        while (theMarcReader.hasNext()) {
            count++;
            Record aRecord = theMarcReader.next();
            if (currentRule.matches(aRecord)) {
                Globals.initMatchDebug("\n\n\tmatched! \tmatched! \tmatched! " + currentRule.toString());
                currentRule.transform(aRecord);
                currentRule.incUsages();
            }
        }
        theTA.append("\n\ncount=" + count
                + "\n#matches=" + currentRule.getUsages());
    }

    private void testEmAll() {
        int count = 0;
        openInputFile(path);
        theRuleSet.resetUsageCounts();
        while (theMarcReader.hasNext()) {
            count++;
            Record aRecord = theMarcReader.next();
            for (Rule nextRule : theRuleSet) {
                if (nextRule.matches(aRecord)) {
                    Globals.initMatchDebug("\n\n\tmatched! \tmatched! \tmatched! " + nextRule.toString());
                    nextRule.transform(aRecord);
                    nextRule.incUsages();
                }
            }
        }
        reportUsages(theRuleSet);
    }

    public void reportUsages(RuleSet list) {
        for (Rule nextRule : list) {
            int usages = nextRule.getUsages();
            if (usages > 0) {
                theTA.append("\tR" + nextRule.getSerialNumber() + " used " + usages + " times\n");
            }
        }
    }
}
