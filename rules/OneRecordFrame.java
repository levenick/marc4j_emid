package org.marc4j.rules;

import java.util.List;
import javax.swing.JFrame;
import org.marc4j.marc.DataField;
import org.marc4j.marc.Record;
import org.marc4j.marc.Subfield;
import org.marc4j.marc.VariableField;

/**
 * OneRecordFrame.java created by levenick on Dec 29, 2013 at 11:06:02 AM
 */
public class OneRecordFrame extends javax.swing.JFrame {

    Record theRecord;
    FieldList displayList;
    static int x = 30;
    static int y = 600;
    static int count = 0;
    private boolean showAll = true;
    private boolean showDefault = true;
    private boolean compressed = true;

    public OneRecordFrame(Record theRecord, MainFrame theRealFrame, boolean foo) {
        this(theRecord, theRealFrame.getInputFileName() + " " + theRecord.getControlNumberField());
        theRealFrame.ping();
    }

    String fixUp(String controlNumber) {
        if (controlNumber == null) {
            return " no control number";
        }
        return controlNumber;
    }

    public OneRecordFrame(Record theRecord, JFrame theFrame) {
        this(theRecord);
    }

    public OneRecordFrame(Record theRecord) {
        initComponents();
        this.theRecord = theRecord;
        Integer[] foo = {6, 7, 8, 300, 505, 960, 961, 962, 963, 964};
        displayList = new FieldList(foo);
        setTitle("One record ");
        setBounds(x, y, 500, 500);
        adjustPosition();
        display();
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setVisible(true);
    }

    OneRecordFrame(Record theRecord, String s, boolean full) {
        initComponents();
        this.theRecord = theRecord;
        setTitle(s);
        setBounds(x, y, 1500, 500);
        y = y + 500;
        setVisible(true);

        showAllMenuActionPerformed(null);
    }

    private void adjustPosition() {
        x += 10;
        y += 10;
        count++;

        if (count > 6) {
            count = 0;
            x = 30;
            y = 600;
        }
    }

    public OneRecordFrame(Record record, String s) {
        this(record);

        setTitle(fixUp(s));
    }

    /**
     * You can't modify the following code; it is regenerated by the Form
     * Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        theTA = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        showAllMenu = new javax.swing.JMenuItem();
        defaultViewMenu = new javax.swing.JMenuItem();
        toggleCompressedMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        theTA.setColumns(20);
        theTA.setFont(new java.awt.Font("Lucida Console", 0, 13)); // NOI18N
        theTA.setRows(5);
        jScrollPane1.setViewportView(theTA);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("View");

        showAllMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.META_MASK));
        showAllMenu.setText("All");
        showAllMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllMenuActionPerformed(evt);
            }
        });
        jMenu2.add(showAllMenu);

        defaultViewMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.META_MASK));
        defaultViewMenu.setText("Default");
        defaultViewMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultViewMenuActionPerformed(evt);
            }
        });
        jMenu2.add(defaultViewMenu);

        toggleCompressedMenu.setText("Toggle compressed");
        toggleCompressedMenu.setToolTipText("<html>\nDisplays subfields on a single line\n<BR>\nYou must select All or Default after to redisplay!");
        toggleCompressedMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleCompressedMenuActionPerformed(evt);
            }
        });
        jMenu2.add(toggleCompressedMenu);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void showAllMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllMenuActionPerformed
        showAll = true;
        showDefault = false;
        display();
    }//GEN-LAST:event_showAllMenuActionPerformed

    private void defaultViewMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultViewMenuActionPerformed
        showAll = false;
        showDefault = true;
        display();
    }//GEN-LAST:event_defaultViewMenuActionPerformed

    private void toggleCompressedMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleCompressedMenuActionPerformed
        compressed = !compressed;
    }//GEN-LAST:event_toggleCompressedMenuActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem defaultViewMenu;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem showAllMenu;
    private javax.swing.JTextArea theTA;
    private javax.swing.JMenuItem toggleCompressedMenu;
    // End of variables declaration//GEN-END:variables

    static final boolean LEARN_SUBFIELDS = false;

    private void display() {
        theTA.setText("");
        theTA.append(theRecord.getLeader().toString() + "\n");
        if (LEARN_SUBFIELDS) {
            System.out.println("\nNew record:");
        }
        for (VariableField nextField : theRecord.getVariableFields()) {
            String tag = nextField.getTag();
            int tagInt = Integer.parseInt(tag);

            if (LEARN_SUBFIELDS) {
                if (tagInt == 505) {
                    System.out.println("nextField = " + nextField.toString());
                    for (Subfield nextSubField : nextField.getSubfields()) {
                        System.out.println("\t\tnextSubField = " + nextSubField);
                        System.out.println("\t\tnextSubField.getCode() = " + nextSubField.getCode());
                        System.out.println("\t\tnextSubField.getData() = " + nextSubField.getData());
                    }
                }
            }

            if (showAll || displayList.contains(tagInt)) {
                if (!compressed) {
                    theTA.append("=" + nextField.toString() + "\n");
                } else if (Integer.parseInt(nextField.getTag()) <= 10) {
                    theTA.append("=" + nextField.toString() + " ");
                } else {
                    DataField df = (DataField) nextField;
                    theTA.append("\n" + myToString(df));
                } //                if (tagInt == 8) {
                //                    theTA.append("                            |||\n");
                //                }
            }
        }
    }

    private String myToString(DataField df) {
        StringBuilder sb = new StringBuilder();
        sb.append("=" + df.getTag());
        sb.append('\n');
        sb.append(df.getIndicator1());
        sb.append(df.getIndicator2());
        for (Subfield sf : df.getSubfields()) {
            sb.append(sf.toString() + " ");
        }
        return sb.toString();
    }

}
